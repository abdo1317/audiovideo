#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ ุจุณูุท ููุญูู ุงูุนููุงุช ุงูุฑูููุฉ
"""

from crypto_analyzer import CryptoAnalyzer
from data_fetcher import DataFetcher
import pandas as pd

def test_data_fetcher():
    """ุงุฎุชุจุงุฑ ุฌุงูุจ ุงูุจูุงูุงุช"""
    print("๐ ุงุฎุชุจุงุฑ ุฌุงูุจ ุงูุจูุงูุงุช...")
    
    fetcher = DataFetcher()
    
    # ุงุฎุชุจุงุฑ ุฌูุจ ูุงุฆูุฉ ุงูุนููุงุช
    try:
        symbols = fetcher.get_available_symbols()
        print(f"โ ุชู ุฌูุจ {len(symbols)} ุนููุฉ ุจูุฌุงุญ")
        print(f"ุงูุนููุงุช ุงููุชุงุญุฉ: {symbols[:5]}...")
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฌูุจ ูุงุฆูุฉ ุงูุนููุงุช: {e}")
        return False
    
    # ุงุฎุชุจุงุฑ ุฌูุจ ุจูุงูุงุช ุนููุฉ ูุงุญุฏุฉ
    try:
        df = fetcher.get_crypto_data('BTC/USDT', '1d', 50)
        if not df.empty:
            print(f"โ ุชู ุฌูุจ ุจูุงูุงุช BTC/USDT ุจูุฌุงุญ ({len(df)} ุดูุนุฉ)")
            print(f"ุขุฎุฑ ุณุนุฑ: ${df['close'].iloc[-1]:,.2f}")
        else:
            print("โ ูู ูุชู ุฌูุจ ุฃู ุจูุงูุงุช")
            return False
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช BTC/USDT: {e}")
        return False
    
    return True

def test_analyzer():
    """ุงุฎุชุจุงุฑ ุงููุญูู"""
    print("\n๐ ุงุฎุชุจุงุฑ ุงููุญูู...")
    
    analyzer = CryptoAnalyzer()
    
    try:
        # ุชุญููู ุนููุฉ ูุงุญุฏุฉ
        signals = analyzer.analyze_single_crypto('BTC/USDT', '1d', 100)
        print(f"โ ุชู ุชุญููู BTC/USDT ุจูุฌุงุญ ({len(signals)} ุฅุดุงุฑุฉ)")
        
        if signals:
            print("ุฃุญุฏุซ ุงูุฅุดุงุฑุงุช:")
            for signal in signals[:3]:
                print(f"  - {signal['type']}: {signal['signal']} ูู {signal['timestamp']}")
        
        # ุชุญููู ุนุฏุฉ ุนููุงุช
        symbols = ['BTC/USDT', 'ETH/USDT']
        df_signals = analyzer.analyze_multiple_cryptos(symbols, ['1d'], 50)
        
        if not df_signals.empty:
            print(f"โ ุชู ุชุญููู {len(symbols)} ุนููุฉ ุจูุฌุงุญ")
            print(f"ุฅุฌูุงูู ุงูุฅุดุงุฑุงุช: {len(df_signals)}")
        else:
            print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฅุดุงุฑุงุช")
            return False
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุญููู: {e}")
        return False
    
    return True

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุงุฎุชุจุงุฑ"""
    print("๐ ุจุฏุก ุงุฎุชุจุงุฑ ุชุทุจูู ุชุญููู ุงูุนููุงุช ุงูุฑูููุฉ")
    print("=" * 50)
    
    # ุงุฎุชุจุงุฑ ุฌุงูุจ ุงูุจูุงูุงุช
    if not test_data_fetcher():
        print("\nโ ูุดู ุงุฎุชุจุงุฑ ุฌุงูุจ ุงูุจูุงูุงุช")
        return
    
    # ุงุฎุชุจุงุฑ ุงููุญูู
    if not test_analyzer():
        print("\nโ ูุดู ุงุฎุชุจุงุฑ ุงููุญูู")
        return
    
    print("\n" + "=" * 50)
    print("โ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช!")
    print("๐ ุงูุชุทุจูู ุฌุงูุฒ ููุงุณุชุฎุฏุงู")
    print("\nูุชุดุบูู ุงูุชุทุจูู:")
    print("python -m streamlit run app.py")
    print("ุฃู ุชุดุบูู ููู: run_app.bat")

if __name__ == "__main__":
    main()
