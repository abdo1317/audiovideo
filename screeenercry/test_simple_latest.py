#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ ุจุณูุท ูุฅุดุงุฑุงุช ุงูุฏุงููุฑุฌูุณ ูู ุงูุดูุนุฉ ุงูุฃุฎูุฑุฉ
"""

from data_fetcher import DataFetcher
from indicators import TechnicalIndicators
import pandas as pd

def test_simple_latest():
    """ุงุฎุชุจุงุฑ ุจุณูุท ููุดูุนุฉ ุงูุฃุฎูุฑุฉ"""
    print("๐ฅ ุงุฎุชุจุงุฑ ุจุณูุท ูุฅุดุงุฑุงุช ุงูุฏุงููุฑุฌูุณ ูู ุงูุดูุนุฉ ุงูุฃุฎูุฑุฉ")
    print("=" * 60)
    
    # ุฌูุจ ุงูุจูุงูุงุช
    fetcher = DataFetcher()
    
    try:
        # ุฌูุจ ุจูุงูุงุช BTC
        print("๐ ุฌูุจ ุจูุงูุงุช BTC/USDT...")
        df = fetcher.get_crypto_data('BTC/USDT', '4h', 100)
        
        if df.empty:
            print("โ ูุง ุชูุฌุฏ ุจูุงูุงุช")
            return
        
        print(f"โ ุชู ุฌูุจ {len(df)} ุดูุนุฉ")
        print(f"๐ ุขุฎุฑ ุณุนุฑ: ${df['close'].iloc[-1]:,.2f}")
        
        # ุญุณุงุจ ุงููุคุดุฑุงุช
        print("\n๐ง ุญุณุงุจ ุงููุคุดุฑุงุช...")
        indicators = TechnicalIndicators(df)
        
        # ุญุณุงุจ RSI
        rsi_values = indicators.calculate_rsi()
        print(f"โ RSI ูุญุณูุจ - ุขุฎุฑ ูููุฉ: {rsi_values.iloc[-1]:.2f}")
        
        # ุญุณุงุจ MACD
        macd_values = indicators.calculate_macd()
        print(f"โ MACD ูุญุณูุจ - ุขุฎุฑ ููุณุชูุบุฑุงู: {macd_values['macd_histogram'].iloc[-1]:.4f}")
        
        # ุญุณุงุจ OBV
        obv_values = indicators.calculate_obv()
        print(f"โ OBV ูุญุณูุจ - ุขุฎุฑ ูููุฉ: {obv_values.iloc[-1]:,.0f}")
        
        # ุงุฎุชุจุงุฑ ุงูุฏุงููุฑุฌูุณ ูู ุงูุดูุนุฉ ุงูุฃุฎูุฑุฉ
        print("\n๐ ุงุฎุชุจุงุฑ ุงูุฏุงููุฑุฌูุณ ูู ุงูุดูุนุฉ ุงูุฃุฎูุฑุฉ...")
        
        # RSI ุงูุฏุงููุฑุฌูุณ
        print("\n๐ RSI ุงูุฏุงููุฑุฌูุณ:")
        try:
            rsi_latest = indicators.detect_latest_divergence(df['close'], df['rsi'], lookback_periods=15)
            print(f"   - ุนุฏุฏ ุงูุฅุดุงุฑุงุช: {len(rsi_latest)}")
            
            for div in rsi_latest:
                print(f"   ๐ฅ {div['type']}: {div['signal']}")
                print(f"      - {div['description']}")
                print(f"      - ุงูููุฉ: {div['strength']:.3f}")
                
        except Exception as e:
            print(f"   โ ุฎุทุฃ ูู RSI: {e}")
        
        # MACD ุงูุฏุงููุฑุฌูุณ
        print("\n๐ MACD ุงูุฏุงููุฑุฌูุณ:")
        try:
            macd_latest = indicators.detect_latest_divergence(df['close'], df['macd_histogram'], lookback_periods=15)
            print(f"   - ุนุฏุฏ ุงูุฅุดุงุฑุงุช: {len(macd_latest)}")
            
            for div in macd_latest:
                print(f"   ๐ฅ {div['type']}: {div['signal']}")
                print(f"      - {div['description']}")
                print(f"      - ุงูููุฉ: {div['strength']:.3f}")
                
        except Exception as e:
            print(f"   โ ุฎุทุฃ ูู MACD: {e}")
        
        # OBV ุงูุฏุงููุฑุฌูุณ
        print("\n๐ OBV ุงูุฏุงููุฑุฌูุณ:")
        try:
            obv_latest = indicators.detect_latest_divergence(df['close'], df['obv'], lookback_periods=15)
            print(f"   - ุนุฏุฏ ุงูุฅุดุงุฑุงุช: {len(obv_latest)}")
            
            for div in obv_latest:
                print(f"   ๐ฅ {div['type']}: {div['signal']}")
                print(f"      - {div['description']}")
                print(f"      - ุงูููุฉ: {div['strength']:.3f}")
                
        except Exception as e:
            print(f"   โ ุฎุทุฃ ูู OBV: {e}")
        
        # ุงุฎุชุจุงุฑ ูุน ูุนุงููุฑ ุฃูู ุตุฑุงูุฉ
        print("\n๐ง ุงุฎุชุจุงุฑ ูุน ูุนุงููุฑ ูุฎููุฉ...")
        
        # ุชุฌุฑุจุฉ ูุนุงููุฑ ุฃูู ุตุฑุงูุฉ
        try:
            # ุชูููู ุงูุญุฏ ุงูุฃุฏูู ููุชุบููุฑ
            current_price = df['close'].iloc[-1]
            current_rsi = df['rsi'].iloc[-1]
            
            print(f"๐ ุงูุณุนุฑ ุงูุญุงูู: ${current_price:,.2f}")
            print(f"๐ RSI ุงูุญุงูู: {current_rsi:.2f}")
            
            # ููุงุฑูุฉ ูุน ุงููุชุฑุงุช ุงูุณุงุจูุฉ
            for i in range(2, 11):
                past_price = df['close'].iloc[-i]
                past_rsi = df['rsi'].iloc[-i]
                
                price_change = (current_price - past_price) / past_price * 100
                rsi_change = current_rsi - past_rsi
                
                print(f"   ูุชุฑุฉ {i}: ุงูุณุนุฑ {price_change:+.2f}%, RSI {rsi_change:+.2f}")
                
                # ุงูุจุญุซ ุนู ุฏุงููุฑุฌูุณ ุจุณูุท
                if abs(price_change) > 0.5 and abs(rsi_change) > 1:
                    if (price_change < 0 and rsi_change > 0) or (price_change > 0 and rsi_change < 0):
                        signal_type = "ุตุนูุฏู" if price_change < 0 and rsi_change > 0 else "ูุจูุทู"
                        print(f"   ๐ฅ ุฏุงููุฑุฌูุณ {signal_type} ูุญุชูู!")
        
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ ุงููุฎูู: {e}")
        
        print("\nโ ุงูุชูู ุงูุงุฎุชุจุงุฑ")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ุนุงู: {e}")

if __name__ == "__main__":
    test_simple_latest()
